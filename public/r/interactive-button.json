{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "interactive-button",
  "type": "registry:component",
  "description": "Statefull button multipupose button to use it in places like Login and SignUp screens ",
  "files": [
    {
      "path": "src/registry/new-york/items/interactive-button/components/interactive-button.tsx",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { motion } from \"motion/react\";\r\nimport { useState, useEffect, MouseEvent } from \"react\";\r\n\r\ntype ButtonState = \"idle\" | \"loading\" | \"success\" | \"failure\";\r\n\r\ninterface InteractiveButtonProps {\r\n  className?: string;\r\n  children?: React.ReactNode;\r\n  onClick?: (event: MouseEvent<HTMLButtonElement>) => void | Promise<void>;\r\n  loadingText?: string;\r\n  successText?: string;\r\n  failureText?: string;\r\n  loadingDuration?: number;\r\n  resetDelay?: number;\r\n  enableEnterKey?: boolean;\r\n  disabled?: boolean;\r\n  type?: \"button\" | \"submit\" | \"reset\";\r\n  form?: string;\r\n  name?: string;\r\n  value?: string;\r\n}\r\n\r\nexport default function InteractiveButton({\r\n  className,\r\n  children = \"Enter\",\r\n  onClick,\r\n  loadingText = \"Loading...\",\r\n  successText = \"Success!\",\r\n  failureText = \"Failed\",\r\n  loadingDuration = 1500,\r\n  resetDelay = 3000,\r\n  enableEnterKey = false,\r\n  disabled,\r\n  type = \"button\",\r\n  form,\r\n  name,\r\n  value,\r\n}: InteractiveButtonProps) {\r\n  const [state, setState] = useState<ButtonState>(\"idle\");\r\n\r\n  useEffect(() => {\r\n    if (!enableEnterKey || state !== \"idle\") return;\r\n\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n      if (e.key === \"Enter\") {\r\n        handleButtonClick();\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleKeyPress);\r\n    return () => window.removeEventListener(\"keydown\", handleKeyPress);\r\n  }, [enableEnterKey, state]);\r\n\r\n  const handleButtonClick = async (event?: MouseEvent<HTMLButtonElement>) => {\r\n    if (state !== \"idle\") return;\r\n\r\n    setState(\"loading\");\r\n\r\n    try {\r\n      if (onClick && event) {\r\n        await onClick(event);\r\n      }\r\n\r\n      setTimeout(() => {\r\n        setState(\"success\");\r\n        setTimeout(() => setState(\"idle\"), resetDelay);\r\n      }, loadingDuration);\r\n    } catch (error) {\r\n      setState(\"failure\");\r\n      setTimeout(() => setState(\"idle\"), resetDelay);\r\n    }\r\n  };\r\n\r\n  const content = {\r\n    idle: { text: children, icon: <EnterIcon /> },\r\n    loading: { text: loadingText, icon: <LoadingIcon /> },\r\n    success: { text: successText, icon: <CheckIcon /> },\r\n    failure: { text: failureText, icon: <FailureIcon /> },\r\n  }[state];\r\n\r\n  const getAnimation = () => {\r\n    switch (state) {\r\n      case \"idle\":\r\n        return {\r\n          initial: { opacity: 0, y: 20, filter: \"blur(4px)\" },\r\n          animate: { opacity: 1, y: 0, filter: \"blur(0px)\" },\r\n          exit: { opacity: 0, y: -10, filter: \"blur(2px)\" },\r\n          transition: { duration: 0.4, ease: \"easeInOut\" as const },\r\n        };\r\n      case \"loading\":\r\n        return {\r\n          initial: { opacity: 0, y: 20, filter: \"blur(4px)\" },\r\n          animate: { opacity: 1, y: 0, filter: \"blur(0px)\" },\r\n          exit: {\r\n            opacity: 0,\r\n            x: 10,\r\n            filter: \"blur(2px)\",\r\n            scale: 0.95,\r\n          },\r\n          transition: {\r\n            duration: 0.25,\r\n            ease: \"easeInOut\" as const,\r\n          },\r\n        };\r\n      case \"success\":\r\n        return {\r\n          initial: { opacity: 0, y: -10, filter: \"blur(4px)\" },\r\n          animate: { opacity: 1, y: 0, filter: \"blur(0px)\" },\r\n          exit: { opacity: 0, y: -10, filter: \"blur(2px)\" },\r\n          transition: { duration: 0.3, ease: \"easeInOut\" as const },\r\n        };\r\n      case \"failure\":\r\n        return {\r\n          initial: {\r\n            x: -10,\r\n            scale: 0.95,\r\n          },\r\n          animate: {\r\n            x: [0, -4, 4, -4, 4, -4, 4, 0],\r\n            scale: 1,\r\n          },\r\n          exit: { opacity: 0, y: -10, filter: \"blur(2px)\" },\r\n          transition: {\r\n            duration: 0.5,\r\n            ease: [0.36, 0.66, 0.04, 1] as const,\r\n            times: [0, 0.1, 0.2, 0.35, 0.5, 0.7, 0.85, 1],\r\n          },\r\n        };\r\n    }\r\n  };\r\n\r\n  const animation = getAnimation();\r\n\r\n  return (\r\n    <motion.button\r\n      onClick={handleButtonClick}\r\n      disabled={state !== \"idle\" || disabled}\r\n      type={type}\r\n      form={form}\r\n      name={name}\r\n      value={value}\r\n      className={cn(\r\n        \"flex cursor-pointer items-center justify-center gap-2 overflow-hidden rounded-md border px-4 py-2\",\r\n        \"shadow-[0_8px_30px_rgb(0,0,0,0.12)] transition-colors\",\r\n        \"border-neutral-200 bg-white text-neutral-900 hover:bg-neutral-50\",\r\n        \"dark:border-neutral-800 dark:bg-neutral-950 dark:text-white dark:hover:bg-neutral-900\",\r\n        \"disabled:cursor-not-allowed\",\r\n        className,\r\n      )}\r\n      whileHover={state === \"idle\" ? { scale: 1.05 } : {}}\r\n      whileTap={state === \"idle\" ? { scale: 0.98 } : {}}\r\n      layout\r\n      transition={{\r\n        layout: { duration: 0.2, ease: \"easeInOut\" },\r\n        scale: { duration: 0.1 },\r\n      }}\r\n    >\r\n      <motion.span\r\n        key={`text-${state}`}\r\n        initial={animation.initial}\r\n        animate={animation.animate}\r\n        exit={animation.exit}\r\n        transition={animation.transition}\r\n        className=\"font-medium\"\r\n      >\r\n        {content.text}\r\n      </motion.span>\r\n      <motion.div\r\n        key={`icon-${state}`}\r\n        initial={animation.initial}\r\n        animate={animation.animate}\r\n        exit={animation.exit}\r\n        transition={animation.transition}\r\n        className=\"flex items-center\"\r\n      >\r\n        {content.icon}\r\n      </motion.div>\r\n    </motion.button>\r\n  );\r\n}\r\n\r\nconst EnterIcon = () => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"18\"\r\n    height=\"18\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className=\"opacity-60\"\r\n  >\r\n    <path d=\"M18 6v6a3 3 0 0 1 -3 3h-10l4 -4m0 8l-4 -4\" />\r\n  </svg>\r\n);\r\n\r\nconst LoadingIcon = () => (\r\n  <motion.svg\r\n    animate={{ rotate: 360 }}\r\n    transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"18\"\r\n    height=\"18\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n  >\r\n    <path d=\"M12 3a9 9 0 1 0 9 9\" />\r\n  </motion.svg>\r\n);\r\n\r\nconst CheckIcon = () => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"18\"\r\n    height=\"18\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"#22c55e\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n  >\r\n    <path d=\"M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0\" />\r\n    <path d=\"M9 12l2 2l4 -4\" />\r\n  </svg>\r\n);\r\n\r\nconst FailureIcon = () => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"18\"\r\n    height=\"18\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"#ef4444\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n  >\r\n    <path d=\"M18 6l-12 12\" />\r\n    <path d=\"M6 6l12 12\" />\r\n  </svg>\r\n);\r\n",
      "type": "registry:ui"
    }
  ]
}