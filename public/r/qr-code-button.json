{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "qr-code-button",
  "type": "registry:component",
  "description": "QR Code button with animated qr code card popout with copy button to copy the url which qr carries",
  "files": [
    {
      "path": "src/registry/new-york/items/qr-code/components/qr-code-button.tsx",
      "content": "import { IconPaperclip, IconQrcode, IconX } from \"@tabler/icons-react\";\r\nimport React, { useState, useMemo, useId } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { AnimatePresence, motion, Transition, Variants } from \"motion/react\";\r\n\r\nexport const QRCode = ({\r\n  className,\r\n  src,\r\n  url,\r\n}: {\r\n  className?: string;\r\n  src: string;\r\n  url: string;\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-center\">\r\n      <AnimatePresence mode=\"wait\">\r\n        {isOpen ? (\r\n          <motion.div\r\n            key=\"qr-modal\"\r\n            initial={{ opacity: 0, scale: 0.7, filter: \"blur(10px)\" }}\r\n            animate={{ opacity: 1, scale: 1, filter: \"blur(0px)\" }}\r\n            exit={{ opacity: 0, scale: 1.3, filter: \"blur(10px)\" }}\r\n            transition={{\r\n              duration: 0.2,\r\n              ease: \"easeInOut\",\r\n            }}\r\n            className=\"flex w-60 flex-col gap-2 overflow-hidden rounded-4xl border border-neutral-200 bg-gray-200 p-2\"\r\n          >\r\n            <div className=\"flex grow items-center justify-center overflow-hidden rounded-4xl bg-white p-2\">\r\n              <img src={src} className=\"\" alt=\"qrcode\" />\r\n            </div>\r\n\r\n            <div className=\"flex grow items-center justify-center gap-2\">\r\n              <CopyButton copyUrl={url} />\r\n              <CloseButton setIsOpen={setIsOpen} />\r\n            </div>\r\n          </motion.div>\r\n        ) : (\r\n          <motion.button\r\n            key=\"qr-button\"\r\n            initial={{ opacity: 0, scale: 0.95, filter: \"blur(20px)\" }}\r\n            animate={{ opacity: 1, scale: 1, filter: \"blur(0px)\" }}\r\n            exit={{ opacity: 0, scale: 1.3, filter: \"blur(10px)\" }}\r\n            transition={{\r\n              duration: 0.2,\r\n              ease: \"easeOut\",\r\n            }}\r\n            onClick={() => setIsOpen(true)}\r\n            className={cn(\r\n              \"flex cursor-pointer items-center justify-center rounded-4xl border border-neutral-200 px-2 py-2 font-medium text-neutral-600 transition-all duration-300 ease-in-out hover:text-neutral-800 dark:border-neutral-800 dark:text-neutral-200\",\r\n              className,\r\n            )}\r\n          >\r\n            <IconQrcode className=\"mr-1\" /> Show QR Code\r\n          </motion.button>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype TextMorphProps = {\r\n  children: string;\r\n  as?: React.ElementType;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n  variants?: Variants;\r\n  transition?: Transition;\r\n};\r\n\r\nfunction TextMorph({\r\n  children,\r\n  as: Component = \"p\",\r\n  className,\r\n  style,\r\n  variants,\r\n  transition,\r\n}: TextMorphProps) {\r\n  const uniqueId = useId();\r\n\r\n  const characters = useMemo(() => {\r\n    const charCounts: Record<string, number> = {};\r\n    return children.split(\"\").map((char) => {\r\n      const lowerChar = char.toLowerCase();\r\n      charCounts[lowerChar] = (charCounts[lowerChar] || 0) + 1;\r\n      return {\r\n        id: `${uniqueId}-${lowerChar}${charCounts[lowerChar]}`,\r\n        label: char === \" \" ? \"\\u00A0\" : char,\r\n      };\r\n    });\r\n  }, [children, uniqueId]);\r\n\r\n  const defaultVariants: Variants = {\r\n    initial: { opacity: 0, y: 10, filter: \"blur(5px)\" },\r\n    animate: { opacity: 1, y: 0, filter: \"blur(0px)\" },\r\n    exit: { opacity: 0, y: -10, filter: \"blur(5px)\" },\r\n  };\r\n\r\n  const defaultTransition: Transition = {\r\n    type: \"spring\",\r\n    stiffness: 280,\r\n    damping: 22,\r\n    mass: 0.3,\r\n  };\r\n\r\n  return (\r\n    <motion.div layout className=\"inline-flex\">\r\n      <Component className={cn(className)} aria-label={children} style={style}>\r\n        <AnimatePresence mode=\"popLayout\" initial={false}>\r\n          {characters.map((character) => (\r\n            <motion.span\r\n              key={character.id}\r\n              layout=\"position\"\r\n              className=\"inline-block\"\r\n              aria-hidden=\"true\"\r\n              initial=\"initial\"\r\n              animate=\"animate\"\r\n              exit=\"exit\"\r\n              variants={variants || defaultVariants}\r\n              transition={transition || defaultTransition}\r\n            >\r\n              {character.label}\r\n            </motion.span>\r\n          ))}\r\n        </AnimatePresence>\r\n      </Component>\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nconst CopyButton = ({ copyUrl }: { copyUrl: string }) => {\r\n  const [text, setText] = useState(\"Copy Link\");\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n\r\n  const handleCopy = async () => {\r\n    if (isAnimating) return;\r\n    setIsAnimating(true);\r\n\r\n    try {\r\n      await navigator.clipboard.writeText(copyUrl);\r\n      setText(\"Copied Link\");\r\n\r\n      setTimeout(() => {\r\n        setText(\"Copy Link\");\r\n        setIsAnimating(false);\r\n      }, 2000);\r\n    } catch (err) {\r\n      console.error(\"Failed to copy: \", err);\r\n      setIsAnimating(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <motion.button\r\n      layout=\"position\"\r\n      transition={{\r\n        type: \"spring\",\r\n        stiffness: 300,\r\n        damping: 22,\r\n        mass: 3.1,\r\n      }}\r\n      onClick={handleCopy}\r\n      className=\"text-md flex items-center justify-center gap-2 rounded-4xl border border-neutral-300 bg-white px-6 py-3 text-neutral-600 select-none hover:text-neutral-800\"\r\n      style={{\r\n        minWidth: \"fit-content\",\r\n      }}\r\n      whileTap={{ scale: 0.98 }}\r\n      disabled={isAnimating}\r\n    >\r\n      <motion.div\r\n        initial={false}\r\n        animate={{\r\n          scale:\r\n            text === \"Copied Link\"\r\n              ? [1, 1.03, 1.06, 1.09, 1.1, 1.1, 1.09, 1.06, 1.03, 1]\r\n              : 1,\r\n          rotate: text === \"Copied Link\" ? [0, 5, -5, 0] : 0,\r\n        }}\r\n        transition={{ duration: 0.4 }}\r\n      >\r\n        <IconPaperclip />\r\n      </motion.div>\r\n\r\n      <motion.div\r\n        layout=\"position\"\r\n        initial={false}\r\n        animate={{ opacity: 1 }}\r\n        transition={{ duration: 0.2 }}\r\n        style={{\r\n          whiteSpace: \"nowrap\",\r\n          overflow: \"hidden\",\r\n        }}\r\n      >\r\n        <TextMorph>{text}</TextMorph>\r\n      </motion.div>\r\n    </motion.button>\r\n  );\r\n};\r\n\r\ntype CloseButtonProps = {\r\n  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n};\r\n\r\nconst CloseButton: React.FC<CloseButtonProps> = ({ setIsOpen }) => {\r\n  return (\r\n    <motion.button\r\n      whileTap={{\r\n        scale: 0.9,\r\n      }}\r\n      className=\"flex items-center justify-center rounded-full border border-neutral-300 bg-white p-3 text-xl text-neutral-600 transition-all duration-300 ease-in-out hover:text-neutral-800\"\r\n      onClick={() => setIsOpen(false)}\r\n      aria-label=\"Close QR\"\r\n    >\r\n      <IconX />\r\n    </motion.button>\r\n  );\r\n};\r\n",
      "type": "registry:ui"
    }
  ]
}